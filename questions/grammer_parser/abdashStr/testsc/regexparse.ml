type token =
  | SYM of (char)
  | EPS
  | STAR
  | PLUS
  | OPTION
  | UNION
  | EQ
  | LPAREN
  | RPAREN
  | EXIT
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "regexparse.mly"
	open Regexast
# 19 "regexparse.ml"
let yytransl_const = [|
  258 (* EPS *);
  259 (* STAR *);
  260 (* PLUS *);
  261 (* OPTION *);
  262 (* UNION *);
  263 (* EQ *);
  264 (* LPAREN *);
  265 (* RPAREN *);
  266 (* EXIT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* SYM *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\003\000\003\000\004\000\
\004\000\004\000\004\000\005\000\005\000\005\000\000\000\000\000"

let yylen = "\002\000\
\003\000\001\000\001\000\003\000\001\000\002\000\001\000\002\000\
\002\000\002\000\001\000\001\000\001\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\012\000\013\000\000\000\003\000\015\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\008\000\009\000\010\000\014\000\000\000\000\000"

let yydgoto = "\003\000\
\008\000\009\000\010\000\011\000\012\000"

let yysindex = "\019\000\
\005\255\015\255\000\000\000\000\000\000\015\255\000\000\000\000\
\018\255\015\255\255\254\000\000\016\255\002\255\015\255\015\255\
\255\254\000\000\000\000\000\000\000\000\015\255\016\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\026\000\014\000\001\000\000\000\027\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\018\000\028\000"

let yygindex = "\000\000\
\000\000\003\000\015\000\246\255\000\000"

let yytablesize = 283
let yytable = "\017\000\
\007\000\018\000\019\000\020\000\013\000\004\000\005\000\015\000\
\014\000\006\000\021\000\017\000\006\000\005\000\007\000\004\000\
\005\000\004\000\023\000\001\000\002\000\015\000\006\000\015\000\
\016\000\002\000\016\000\001\000\000\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\000\000\000\000\000\000\007\000\007\000\
\007\000\007\000\006\000\006\000\000\000\000\000\000\000\006\000\
\006\000\006\000\006\000\005\000\005\000\000\000\005\000\004\000\
\004\000\000\000\004\000"

let yycheck = "\010\000\
\000\000\003\001\004\001\005\001\002\000\001\001\002\001\006\001\
\006\000\000\000\009\001\022\000\008\001\000\000\010\001\001\001\
\002\001\000\000\016\000\001\000\002\000\006\001\008\001\006\001\
\007\001\000\000\000\000\000\000\255\255\015\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\001\001\002\001\255\255\255\255\255\255\006\001\
\007\001\008\001\009\001\006\001\007\001\255\255\009\001\006\001\
\007\001\255\255\009\001"

let yynames_const = "\
  EPS\000\
  STAR\000\
  PLUS\000\
  OPTION\000\
  UNION\000\
  EQ\000\
  LPAREN\000\
  RPAREN\000\
  EXIT\000\
  EOF\000\
  "

let yynames_block = "\
  SYM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Regexast.regex) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Regexast.regex) in
    Obj.repr(
# 18 "regexparse.mly"
            ( Eq(_1,_3) )
# 168 "regexparse.ml"
               : Regexast.check))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Regexast.regex) in
    Obj.repr(
# 19 "regexparse.mly"
       ( Print _1 )
# 175 "regexparse.ml"
               : Regexast.check))
; (fun __caml_parser_env ->
    Obj.repr(
# 20 "regexparse.mly"
        ( Exit )
# 181 "regexparse.ml"
               : Regexast.check))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Regexast.regex) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'concat_exp) in
    Obj.repr(
# 23 "regexparse.mly"
                      ( union_regex _1 _3 )
# 189 "regexparse.ml"
               : Regexast.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'concat_exp) in
    Obj.repr(
# 24 "regexparse.mly"
              ( _1 )
# 196 "regexparse.ml"
               : Regexast.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'concat_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'star_exp) in
    Obj.repr(
# 27 "regexparse.mly"
                     ( concat_regex _1 _2 )
# 204 "regexparse.ml"
               : 'concat_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'star_exp) in
    Obj.repr(
# 28 "regexparse.mly"
            ( _1 )
# 211 "regexparse.ml"
               : 'concat_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'star_exp) in
    Obj.repr(
# 31 "regexparse.mly"
               ( star_regex _1 )
# 218 "regexparse.ml"
               : 'star_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'star_exp) in
    Obj.repr(
# 32 "regexparse.mly"
                 ( concat_regex _1 (star_regex _1) )
# 225 "regexparse.ml"
               : 'star_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'star_exp) in
    Obj.repr(
# 33 "regexparse.mly"
                   ( union_regex _1 (Concat []) )
# 232 "regexparse.ml"
               : 'star_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom_exp) in
    Obj.repr(
# 34 "regexparse.mly"
            ( _1 )
# 239 "regexparse.ml"
               : 'star_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 37 "regexparse.mly"
     ( Sym _1 )
# 246 "regexparse.ml"
               : 'atom_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "regexparse.mly"
       ( Concat [] )
# 252 "regexparse.ml"
               : 'atom_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Regexast.regex) in
    Obj.repr(
# 39 "regexparse.mly"
                     ( _2 )
# 259 "regexparse.ml"
               : 'atom_exp))
(* Entry stmt *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let stmt (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Regexast.check)
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Regexast.regex)
