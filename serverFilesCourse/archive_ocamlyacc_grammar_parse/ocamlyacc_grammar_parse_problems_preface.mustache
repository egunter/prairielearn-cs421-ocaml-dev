<p>At this point, what you have to do for this assignment should already be fairly clear. The following problems just break your assignment into pieces and are meant to guide you towards the solution. A word of warning is however in order here: The problem of writing a parser is <span><em>not</em></span> a modular one because the parsing of each language construct depends on all the other constructs. Adding a new syntactic category may well force you to go back and rewrite all the categories already present. Therefore you should <strong>approach the set of problems as a whole</strong>, and always keep in mind the precedences and associativities given for the PicoML constructs.</p>
<p>You are allowed, and even encouraged, <strong>to add to your grammar new nonterminals (together with new productions)</strong> in addition to the one that we require (<code>main</code>). In addition, you may find it desirable to <strong>rewrite or reorganize the various productions we have given you</strong>. The productions given are intended only to be enough to allow you to start testing your additions.</p>
<p>Also, <strong>it is allowed that you define the constructs in an order that is different from the one we have given here</strong>. For instance, we have gathered the requirements according to overall syntactic and semantic similarities (e.g., grouping arithmetic operators together); you may rather want to group the constructs according to their precedence; you are absolutely free to do that. However, we require that the non-terminal <code>main</code> that we introduced in the problem statement be present in your grammar and that it produces parses for exactly the same set of strings as described by the grammar in the Section <a href="#probset" data-reference-type="ref" data-reference="probset">Problem Setting</a>, obeying the precedences and associativities also described in that section.</p>
<p>In between each of these examples we have reset the environment.</p>
